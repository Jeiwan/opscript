{"N/A":{"word":"N/A","opcode":"","input":"","output":"","short":"bytes is data to be pushed onto the stack"},"OP_0, OP_FALSE":{"word":"OP_0, OP_FALSE","opcode":"","input":"","output":"","short":"An empty array of bytes is pushed onto the stack. (This is not a no-op: an item is added to the stack.)"},"OP_0NOTEQUAL":{"word":"OP_0NOTEQUAL","opcode":"","input":"","output":"","short":"Returns 0 if the input is 0. 1 otherwise."},"OP_1, OP_TRUE":{"word":"OP_1, OP_TRUE","opcode":"","input":"","output":"","short":"The number 1 is pushed onto the stack."},"OP_1ADD":{"word":"OP_1ADD","opcode":"","input":"","output":"","short":"1 is added to the input."},"OP_1NEGATE":{"word":"OP_1NEGATE","opcode":"","input":"","output":"","short":"The number -1 is pushed onto the stack."},"OP_1SUB":{"word":"OP_1SUB","opcode":"","input":"","output":"","short":"1 is subtracted from the input."},"OP_2-OP_16":{"word":"OP_2-OP_16","opcode":"","input":"","output":"","short":"The number in the word name (2-16) is pushed onto the stack."},"OP_2DIV":{"word":"OP_2DIV","opcode":"","input":"","output":"","short":""},"OP_2DROP":{"word":"OP_2DROP","opcode":"","input":"","output":"","short":"Removes the top two stack items."},"OP_2DUP":{"word":"OP_2DUP","opcode":"","input":"","output":"","short":"Duplicates the top two stack items."},"OP_2MUL":{"word":"OP_2MUL","opcode":"","input":"","output":"","short":""},"OP_2OVER":{"word":"OP_2OVER","opcode":"","input":"","output":"","short":"Copies the pair of items two spaces back in the stack to the front."},"OP_2ROT":{"word":"OP_2ROT","opcode":"","input":"","output":"","short":"The fifth and sixth items back are moved to the top of the stack."},"OP_2SWAP":{"word":"OP_2SWAP","opcode":"","input":"","output":"","short":"Swaps the top two pairs of items."},"OP_3DUP":{"word":"OP_3DUP","opcode":"","input":"","output":"","short":"Duplicates the top three stack items."},"OP_ABS":{"word":"OP_ABS","opcode":"","input":"","output":"","short":"The input is made positive."},"OP_ADD":{"word":"OP_ADD","opcode":"","input":"","output":"","short":"a is added to b."},"OP_AND":{"word":"OP_AND","opcode":"","input":"","output":"","short":""},"OP_BOOLAND":{"word":"OP_BOOLAND","opcode":"","input":"","output":"","short":"If both a and b are not 0, the output is 1. Otherwise 0."},"OP_BOOLOR":{"word":"OP_BOOLOR","opcode":"","input":"","output":"","short":"If a or b is not 0, the output is 1. Otherwise 0."},"OP_CAT":{"word":"OP_CAT","opcode":"","input":"","output":"","short":""},"OP_CHECKLOCKTIMEVERIFY (previously OP_NOP2)":{"word":"OP_CHECKLOCKTIMEVERIFY (previously OP_NOP2)","opcode":"","input":"","output":"","short":"."},"OP_CHECKMULTISIG":{"word":"OP_CHECKMULTISIG","opcode":"","input":"","output":"","short":"Compares the first signature against each public key until it finds an ECDSA match. Starting with the subsequent public key, it compares the second signature against each remaining public key until it finds an ECDSA match. The process is repeated until all signatures have been checked or not enough public keys remain to produce a successful result. All signatures need to match a public key. Because public keys are not checked again if they fail any signature comparison, signatures must be placed in the scriptSig using the same order as their corresponding public keys were placed in the scriptPubKey or redeemScript. If all signatures are valid, 1 is returned, 0 otherwise. Due to a bug, one extra unused value is removed from the stack."},"OP_CHECKMULTISIGVERIFY":{"word":"OP_CHECKMULTISIGVERIFY","opcode":"","input":"","output":"","short":"Same as OP_CHECKMULTISIG, but OP_VERIFY is executed afterward."},"OP_CHECKSEQUENCEVERIFY (previously OP_NOP3)":{"word":"OP_CHECKSEQUENCEVERIFY (previously OP_NOP3)","opcode":"","input":"","output":"","short":"."},"OP_CHECKSIG":{"word":"OP_CHECKSIG","opcode":"","input":"","output":"","short":"The entire transaction's outputs, inputs, and script (from the most recently-executed OP_CODESEPARATOR to the end) are hashed. The signature used by OP_CHECKSIG must be a valid signature for this hash and public key. If it is, 1 is returned, 0 otherwise."},"OP_CHECKSIGVERIFY":{"word":"OP_CHECKSIGVERIFY","opcode":"","input":"","output":"","short":"Same as OP_CHECKSIG, but OP_VERIFY is executed afterward."},"OP_CODESEPARATOR":{"word":"OP_CODESEPARATOR","opcode":"","input":"","output":"","short":"All of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR."},"OP_DEPTH":{"word":"OP_DEPTH","opcode":"","input":"","output":"","short":"Puts the number of stack items onto the stack."},"OP_DIV":{"word":"OP_DIV","opcode":"","input":"","output":"","short":""},"OP_DROP":{"word":"OP_DROP","opcode":"","input":"","output":"","short":"Removes the top stack item."},"OP_DUP":{"word":"OP_DUP","opcode":"","input":"","output":"","short":"Duplicates the top stack item."},"OP_ELSE":{"word":"OP_ELSE","opcode":"","input":"","output":"","short":"If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these statements are and if the preceding OP_IF or OP_NOTIF or OP_ELSE was executed then these statements are not."},"OP_ENDIF":{"word":"OP_ENDIF","opcode":"","input":"","output":"","short":"."},"OP_EQUAL":{"word":"OP_EQUAL","opcode":"","input":"","output":"","short":"Returns 1 if the inputs are exactly equal, 0 otherwise."},"OP_EQUALVERIFY":{"word":"OP_EQUALVERIFY","opcode":"","input":"","output":"","short":"Same as OP_EQUAL, but runs OP_VERIFY afterward."},"OP_FROMALTSTACK":{"word":"OP_FROMALTSTACK","opcode":"","input":"","output":"","short":"Puts the input onto the top of the main stack. Removes it from the alt stack."},"OP_GREATERTHAN":{"word":"OP_GREATERTHAN","opcode":"","input":"","output":"","short":"Returns 1 if a is greater than b, 0 otherwise."},"OP_GREATERTHANOREQUAL":{"word":"OP_GREATERTHANOREQUAL","opcode":"","input":"","output":"","short":"Returns 1 if a is greater than or equal to b, 0 otherwise."},"OP_HASH160":{"word":"OP_HASH160","opcode":"","input":"","output":"","short":"The input is hashed twice: first with SHA-256 and then with RIPEMD-160."},"OP_HASH256":{"word":"OP_HASH256","opcode":"","input":"","output":"","short":"The input is hashed two times with SHA-256."},"OP_IF":{"word":"OP_IF","opcode":"","input":"","output":"","short":"If the top stack value is not False, the statements are executed. The top stack value is removed."},"OP_IFDUP":{"word":"OP_IFDUP","opcode":"","input":"","output":"","short":"If the top stack value is not 0, duplicate it."},"OP_INVALIDOPCODE":{"word":"OP_INVALIDOPCODE","opcode":"","input":"","output":"","short":"Matches any opcode that is not yet assigned."},"OP_INVERT":{"word":"OP_INVERT","opcode":"","input":"","output":"","short":""},"OP_LEFT":{"word":"OP_LEFT","opcode":"","input":"","output":"","short":""},"OP_LESSTHAN":{"word":"OP_LESSTHAN","opcode":"","input":"","output":"","short":"Returns 1 if a is less than b, 0 otherwise."},"OP_LESSTHANOREQUAL":{"word":"OP_LESSTHANOREQUAL","opcode":"","input":"","output":"","short":"Returns 1 if a is less than or equal to b, 0 otherwise."},"OP_LSHIFT":{"word":"OP_LSHIFT","opcode":"","input":"","output":"","short":""},"OP_MAX":{"word":"OP_MAX","opcode":"","input":"","output":"","short":"Returns the larger of a and b."},"OP_MIN":{"word":"OP_MIN","opcode":"","input":"","output":"","short":"Returns the smaller of a and b."},"OP_MOD":{"word":"OP_MOD","opcode":"","input":"","output":"","short":""},"OP_MUL":{"word":"OP_MUL","opcode":"","input":"","output":"","short":""},"OP_NEGATE":{"word":"OP_NEGATE","opcode":"","input":"","output":"","short":"The sign of the input is flipped."},"OP_NIP":{"word":"OP_NIP","opcode":"","input":"","output":"","short":"Removes the second-to-top stack item."},"OP_NOP":{"word":"OP_NOP","opcode":"","input":"","output":"","short":"Does nothing."},"OP_NOP1, OP_NOP4-OP_NOP10":{"word":"OP_NOP1, OP_NOP4-OP_NOP10","opcode":"","input":"","output":"","short":"The word is ignored. Does not mark transaction as invalid."},"OP_NOT":{"word":"OP_NOT","opcode":"","input":"","output":"","short":"If the input is 0 or 1, it is flipped. Otherwise the output will be 0."},"OP_NOTIF":{"word":"OP_NOTIF","opcode":"","input":"","output":"","short":"If the top stack value is False, the statements are executed. The top stack value is removed."},"OP_NUMEQUAL":{"word":"OP_NUMEQUAL","opcode":"","input":"","output":"","short":"Returns 1 if the numbers are equal, 0 otherwise."},"OP_NUMEQUALVERIFY":{"word":"OP_NUMEQUALVERIFY","opcode":"","input":"","output":"","short":"Same as OP_NUMEQUAL, but runs OP_VERIFY afterward."},"OP_NUMNOTEQUAL":{"word":"OP_NUMNOTEQUAL","opcode":"","input":"","output":"","short":"Returns 1 if the numbers are not equal, 0 otherwise."},"OP_OR":{"word":"OP_OR","opcode":"","input":"","output":"","short":""},"OP_OVER":{"word":"OP_OVER","opcode":"","input":"","output":"","short":"Copies the second-to-top stack item to the top."},"OP_PICK":{"word":"OP_PICK","opcode":"","input":"","output":"","short":"back in the stack is copied to the top."},"OP_PUBKEY":{"word":"OP_PUBKEY","opcode":"","input":"","output":"","short":"Represents a public key compatible with OP_CHECKSIG."},"OP_PUBKEYHASH":{"word":"OP_PUBKEYHASH","opcode":"","input":"","output":"","short":"Represents a public key hashed with OP_HASH160."},"OP_PUSHDATA1":{"word":"OP_PUSHDATA1","opcode":"","input":"","output":"","short":"The next byte contains the number of bytes to be pushed onto the stack."},"OP_PUSHDATA2":{"word":"OP_PUSHDATA2","opcode":"","input":"","output":"","short":"The next two bytes contain the number of bytes to be pushed onto the stack in little endian order."},"OP_PUSHDATA4":{"word":"OP_PUSHDATA4","opcode":"","input":"","output":"","short":"The next four bytes contain the number of bytes to be pushed onto the stack in little endian order."},"OP_RESERVED":{"word":"OP_RESERVED","opcode":"","input":"","output":"","short":"unless occuring in an unexecuted OP_IF branch"},"OP_RESERVED1":{"word":"OP_RESERVED1","opcode":"","input":"","output":"","short":"unless occuring in an unexecuted OP_IF branch"},"OP_RESERVED2":{"word":"OP_RESERVED2","opcode":"","input":"","output":"","short":"unless occuring in an unexecuted OP_IF branch"},"OP_RETURN":{"word":"OP_RETURN","opcode":"","input":"","output":"","short":") after the OP_RETURN provided the total scriptPubKey length is at most 83 bytes."},"OP_RIGHT":{"word":"OP_RIGHT","opcode":"","input":"","output":"","short":""},"OP_RIPEMD160":{"word":"OP_RIPEMD160","opcode":"","input":"","output":"","short":"The input is hashed using RIPEMD-160."},"OP_ROLL":{"word":"OP_ROLL","opcode":"","input":"","output":"","short":"back in the stack is moved to the top."},"OP_ROT":{"word":"OP_ROT","opcode":"","input":"","output":"","short":"The top three items on the stack are rotated to the left."},"OP_RSHIFT":{"word":"OP_RSHIFT","opcode":"","input":"","output":"","short":""},"OP_SHA1":{"word":"OP_SHA1","opcode":"","input":"","output":"","short":"The input is hashed using SHA-1."},"OP_SHA256":{"word":"OP_SHA256","opcode":"","input":"","output":"","short":"The input is hashed using SHA-256."},"OP_SIZE":{"word":"OP_SIZE","opcode":"","input":"","output":"","short":"Pushes the string length of the top element of the stack (without popping it)."},"OP_SUB":{"word":"OP_SUB","opcode":"","input":"","output":"","short":"b is subtracted from a."},"OP_SUBSTR":{"word":"OP_SUBSTR","opcode":"","input":"","output":"","short":""},"OP_SWAP":{"word":"OP_SWAP","opcode":"","input":"","output":"","short":"The top two items on the stack are swapped."},"OP_TOALTSTACK":{"word":"OP_TOALTSTACK","opcode":"","input":"","output":"","short":"Puts the input onto the top of the alt stack. Removes it from the main stack."},"OP_TUCK":{"word":"OP_TUCK","opcode":"","input":"","output":"","short":"The item at the top of the stack is copied and inserted before the second-to-top item."},"OP_VER":{"word":"OP_VER","opcode":"","input":"","output":"","short":"unless occuring in an unexecuted OP_IF branch"},"OP_VERIF":{"word":"OP_VERIF","opcode":"","input":"","output":"","short":""},"OP_VERIFY":{"word":"OP_VERIFY","opcode":"","input":"","output":"","short":"if top stack value is not true. The top stack value is removed."},"OP_VERNOTIF":{"word":"OP_VERNOTIF","opcode":"","input":"","output":"","short":""},"OP_WITHIN":{"word":"OP_WITHIN","opcode":"","input":"","output":"","short":"Returns 1 if x is within the specified range (left-inclusive), 0 otherwise."},"OP_XOR":{"word":"OP_XOR","opcode":"","input":"","output":"","short":""}}